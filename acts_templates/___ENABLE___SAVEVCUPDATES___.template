unsigned int offsets1[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable = offsets1 complete
unsigned int offsets2[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable = offsets2 complete
unsigned int offsets3[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable = offsets3 complete
if(sweep==0){
	SAVE_CSR_UPDATES_LOOP1: for(unsigned int p_v=0; p_v<__NUM_APPLYPARTITIONS; p_v++){
		unsigned int voffsett = p_v * MAX_CSRUPDATES_VECSIZE_PER__APPLYPARTITION;
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			offsets1[n] = actpackupdates_dram___size[n][p_v]; offsets2[n] = actpackupdates_dram___size[n][p_v]; // NEW*
		} 
		max_limit = 0; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ max_limits[inst] = 0; }
		SAVE_CSR_UPDATES_LOOP1B: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL
			SAVE_CSR_UPDATES_LOOP1B1: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ if(max_limits[inst] < updates_buffer___size[inst][v][p_v]){ max_limits[inst] = updates_buffer___size[inst][v][p_v]; }}
		} 
		SAVE_CSR_UPDATES_LOOP1C: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ if(max_limit < max_limits[inst]){ max_limit = max_limits[inst]; }}
		
		keyvalue_t updates_vecs[NUM_VALID_PEs][EDGE_PACK_SIZE]; 
		#pragma HLS ARRAY_PARTITION variable = updates_vecs complete dim=0
		keyvalue_t invalidkv; invalidkv.key = INVALIDDATA; invalidkv.value = INVALIDDATA;
		SAVE_CSR_UPDATES_LOOP1D: for(unsigned int t=0; t<max_limit; t++){ // FIXME? CAUSING HANGING?
		#pragma HLS PIPELINE II=1
			SAVE_CSR_UPDATES_LOOP1E: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				SAVE_CSR_UPDATES_LOOP1F: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					if(t < updates_buffer___size[inst][v][p_v]){ 
						vprop_t tmp = retrieve_vdatabuffer(v, voffsett + t, vdata_buffer[inst]); 
						updates_vecs[inst][v].key = tmp.prop; updates_vecs[inst][v].value = tmp.mask;
						#ifdef _DEBUGMODE_CHECKS3
						if((updates_vecs[inst][v].key % EDGE_PACK_SIZE) != v){ cout<<"acts_kernel 1234:: updates_vecs["<<inst<<"]["<<v<<"].key("<<updates_vecs[inst][v].key<<") % v("<<v<<") != 0. EXITING..."<<endl; for(unsigned int v1=0; v1<EDGE_PACK_SIZE; v1++){ cout<<"updates_vecs["<<inst<<"].data["<<v1<<"].key ("<<(updates_vecs[inst][v].key % EDGE_PACK_SIZE)<<"): "<<updates_vecs[inst][v1].key<<""<<endl; } exit(EXIT_FAILURE); }				
						#endif 
					}
					#ifdef ___FALSE___
					else { updates_vecs[inst][v] = invalidkv; } // VHLS-RESOLUTION
					#endif 
					if(t < updates_buffer___size[inst][v][p_v]){ ens[inst][v] = true; } else { ens[inst][v] = false; }
					#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
					if(t < updates_buffer___size[inst][v][p_v]){ std::cout<<"VC - COMMIT CSR UPDATES SEEN @: [inst: "<<inst<<"], [updates_vecs["<<inst<<"]["<<v<<"].key: "<<updates_vecs[inst][v].key<<", updates_vecs["<<inst<<"]["<<v<<"].value: "<<updates_vecs[inst][v].value<<"]"<<std::endl; }
					#endif
				}
			}
			#ifndef FPGA_IMPL
			checkoutofbounds("acts_kernel::ERROR 152::", actpackupdates_dram___size[0][p_v], HBM_CHANNEL_SIZE, NAp, NAp, NAp);
			#endif 
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
			#pragma HLS UNROLL
				offsets3[n] = globalparams[GLOBALPARAMSCODE__BASEOFFSET__UPDATES] + updatesptrs[p_v] + offsets1[n] + t;
			}
			dinsertmany_updatesdram(offsets3, updates_vecs, ens, {% include '___HBM___ARGS___.template' %}, updatesptrs);
			SAVE_CSR_UPDATES_LOOP1G: for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
			#pragma HLS UNROLL
				if(t < max_limits[n]){ offsets2[n] += 1; }
			}
			update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___SAVEVCUPDATES___, 1);
		}
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			actpackupdates_dram___size[n][p_v] = offsets2[n]; 
		}
	}
}
