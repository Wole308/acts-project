#define ___ENABLE___LOADEDGEUPDATESTOBRAM___
#define ___ENABLE___COLLECTSTATS___
#define ___ENABLE___MAPEDGEUPDATESTOURAM___
#define ___ENABLE___APPLY_EDGEUPDATES___
#define ___ENABLE___PREPAREFORNEXTROUND___
// #define _DEBUGMODE_KERNELPRINTS4_PROCESSEDGEUPDATES
#define _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4

edge_update_vec_dt edge_update_vecs[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable=edge_update_vecs complete
edge3_vec_dt edge3_vecs[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable=edge3_vecs complete
unsigned int offsets[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable = offsets complete
unsigned int maxs[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable=maxs complete

edge_update_type MISSBUFFER_edgeupdates[NUM_VALID_PEs][EDGE_PACK_SIZE][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates complete dim=2	
edge3_type MISSBUFFER_edges[NUM_VALID_PEs][EDGE_PACK_SIZE][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edges complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edges complete dim=2	

unsigned int MISSBUFFER_edgeupdates_index[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=2	
unsigned int MISSBUFFER_edges_index[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=1
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=2	

unsigned int max_sz_eus[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete

edge_update_vec_dt edge_updates_buffer_vecs[NUM_VALID_PEs][BLOCKRAM_SIZE];	
#pragma HLS ARRAY_PARTITION variable=edge_updates_buffer_vecs complete dim=1
unsigned int edgeupdates_hash_ids[NUM_VALID_PEs][EDGE_PACK_SIZE][BLOCKRAM_SIZE];	
#pragma HLS ARRAY_PARTITION variable=edgeupdates_hash_ids complete dim=1
#pragma HLS ARRAY_PARTITION variable=edgeupdates_hash_ids complete dim=2

// clear URAMs
MY_LOOP1580: for(unsigned int t=0; t<EDGE_UPDATES_DRAMBUFFER_SIZE; t++){ 
#pragma HLS PIPELINE II=1
	for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
	#pragma HLS UNROLL
		for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
		#pragma HLS UNROLL		
			URAM_map[inst][v][t].offset = 0; 
			URAM_map[inst][v][t].size = 0;	
			URAM_edgeupdates[inst][v][t].srcvid = INVALIDDATA; 
			URAM_edgeupdates[inst][v][t].dstvid = INVALIDDATA; 
		}
	}
}

MY_LOOP1481: for(unsigned int t=0; t<BLOCKRAM_SIZE; t++){ 
#pragma HLS PIPELINE II=1
	for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
	#pragma HLS UNROLL	
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL	
			edgeupdates_hash_ids[inst][v][t] = 0; 
		}
	}
}	

// clear URAMs
// PROCESS_EDGEUPDATES_MODULE_LOOP1B: for(unsigned int p_u=0; p_u<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]; p_u++){ // 1, __NUM_UPARTITIONS. REMOVEME.
#ifndef ___RUNNING_FPGA_SYNTHESIS___
if(all_vertices_active_in_all_iterations == true){ cout<<"### inserting/deleting/updating edges in upartition "<<p_u<<": [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"]"<<endl; }
#endif 
EC_PROCESS_EDGEUPDATES_LOOP1: for(unsigned int llp_set=0; llp_set<globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS]; llp_set++){	
	EC_PROCESS_EDGEUPDATES_LOOP1B: for(unsigned int llp_id=0; llp_id<EDGE_PACK_SIZE; llp_id++){ // REMOVEME.
		#ifdef _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
		cout<<"------------------- update edges: ["<<p_u<<", "<<llp_set<<", "<<llp_id<<"] -------------------"<<endl; 
		#endif 
		
		map_t edgeupdate_maps[NUM_VALID_PEs];
		#pragma HLS ARRAY_PARTITION variable=edgeupdate_maps complete
		map_t edge_maps[NUM_VALID_PEs];
		#pragma HLS ARRAY_PARTITION variable=edge_maps complete	
		edge_update_type invalid_edgeupdate_data; invalid_edgeupdate_data.srcvid = INVALIDDATA; invalid_edgeupdate_data.dstvid = INVALIDDATA; 
		edge3_type invalid_edge_data; invalid_edge_data.srcvid = INVALIDDATA; invalid_edge_data.dstvid = INVALIDDATA; 
		
		// load edges map
		load_edgemaps((p_u * MAX_NUM_LLP_PER_UPARTITION) + (llp_set * NUM_LLP_PER_LLPSET) + llp_id, globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKVPTRS2], edge_maps, {% include '___HBM___ARGS___.template' %});
		
		// load edge updates maps 
		load_edgemaps((p_u * MAX_NUM_LLP_PER_UPARTITION) + (llp_set * NUM_LLP_PER_LLPSET) + llp_id, globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATESPTRS], edgeupdate_maps, {% include '___HBM___ARGS___.template' %});
		
		#ifdef _DEBUGMODE_KERNELPRINTS4_PROCESSEDGEUPDATES
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<"process-edge-updates: edgeupdate_maps[n]["<<llp_id<<"]: p_u: "<<p_u<<", llp_set: "<<llp_set<<", llp_id: "<<llp_id<<", offset: "<<edgeupdate_maps[n].offset<<", size: "<<edgeupdate_maps[n].size<<""<<endl; }
		#endif 
		
		// prepare maps, offsets, variables 
		unsigned int max_sz = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ limits[n] = edge_maps[n].size; } for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max_sz < limits[n]){ max_sz = limits[n]; }}			
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets[n] = edge_maps[n].offset; }
		#ifdef _DEBUGMODE_KERNELPRINTS4_PROCESSEDGEUPDATES
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<"process-edge-updates: edges map offsets: "; cout<<offsets[n]<<", max_sz: "<<max_sz<<endl; }
		#endif 			

		// prepare maps, offsets, variables 
		unsigned int max_sz_eu = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ limits_eu[n] = edgeupdate_maps[n].size; } for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max_sz_eu < limits_eu[n]){ max_sz_eu = limits_eu[n]; }}
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
			offsets_eu[n] = edgeupdate_maps[n].offset; 
		}
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
			#pragma HLS UNROLL
				max_sz_eus[n][v] = edgeupdate_maps[n].size;
			}
		}
		#ifdef _DEBUGMODE_KERNELPRINTS4_PROCESSEDGEUPDATES
		cout<<"[BEFORE - EDGE UPDATES MAP]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edgeupdate_maps[n].size<<", "; } cout<<endl;
		cout<<"[BEFORE - EDGE MAP]: "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<edge_maps[n].size<<", "; } cout<<endl;
		#endif 
		if(max_sz_eu == 0){ continue; }
		if(max_sz_eu > BLOCKRAM_SIZE){ max_sz_eu = BLOCKRAM_SIZE; }
		unsigned int padding_factor = EDGE_UPDATES_DRAMBUFFER_SIZE / max_sz_eu; // 12; // 16; // 8;
		#ifdef _DEBUGMODE_CHECKS3
		if(padding_factor == 0){ cout<<"apply-edge-updates: padding_factor == 0. EDGE_UPDATES_DRAMBUFFER_SIZE: "<<EDGE_UPDATES_DRAMBUFFER_SIZE<<", max_sz_eu: "<<max_sz_eu<<". EXITING..."<<endl; exit(EXIT_FAILURE); }
		#endif 
		
		// successive applies until no more edge updates are left
		APPLY_EDGEUPDATES_MAINLOOP1: for(unsigned int c=0; c<1; c++){
			#ifdef _DEBUGMODE_KERNELPRINTS//4
			cout<<"--------------------------------- [p_u: "<<p_u<<", llp_set: "<<llp_set<<", llp_id: "<<llp_id<<", c: "<<c<<"] edge updates: max_sz: "<<max_sz<<", max_sz_eu: "<<max_sz_eu<<", offsets_eu[0]: "<<offsets_eu[0]<<" --------------------------------------"<<endl;
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<"max_sz_eus for PE "<<n<<": "; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<max_sz_eus[n][v]<<", "; } cout<<endl; }
			#endif 
			
			// clear indexes
			MY_LOOP12735: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				MY_LOOP12746: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					MISSBUFFER_edgeupdates_index[inst][v] = 0;
					MISSBUFFER_edges_index[inst][v] = 0;
				}
			}
			
			// load edge updates to BRAM buffer
			#ifdef ___ENABLE___LOADEDGEUPDATESTOBRAM___
			edge_update_vec_dt edge_update_vecs2[NUM_VALID_PEs];	
			#pragma HLS ARRAY_PARTITION variable=edge_update_vecs2 complete
			COLLECTSTATS_EDGEUPDATES_LOOP1: for(unsigned int t=0; t<max_sz_eu; t++){ // max_sz_eu // sz_ // EDGE_UPDATES_DRAMBUFFER_SIZE // EDGE_LLPUPDATES_DRAMBUFFER_SIZE // FIXME // FIXHANG
			#pragma HLS PIPELINE II={{context['II_COLLECTSTATS_EDGEUPDATES_LOOP1']}}
				dretrievemany_edgeupdates(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATES], offsets_eu, t, edge_update_vecs2, {% include '___HBM___ARGS___.template' %});
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					#pragma HLS UNROLL
						edge_update_type edge_update = edge_update_vecs2[inst].data[v];
						edge_updates_buffer_vecs[inst][t].data[v] = edge_update;
						unsigned int incr = 0; unsigned int index = 0; 
						if((edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE) && (t < max_sz_eu)){ incr = 1; index = edge_update.srcvid; } else { incr = 0; index = 0; }	
						URAM_map[inst][v][index].size += incr;								
					}
				}
			}
			#endif 
			
			// collect edge-update stats 
			#ifdef ___ENABLE___COLLECTSTATS___
			COLLECTSTATS_EDGEUPDATES_LOOP2: for(unsigned int t=1; t<EDGE_UPDATES_DRAMBUFFER_SIZE; t++){ 
			#pragma HLS PIPELINE II={{context['II_COLLECTSTATS_EDGEUPDATES_LOOP2']}}
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){	
				#pragma HLS UNROLL
					for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					#pragma HLS UNROLL
						URAM_map[inst][v][t].offset = URAM_map[inst][v][t-1].offset + (URAM_map[inst][v][t-1].size * padding_factor); 
					}
				}
			}	
			#endif 
			
			// print summary
			#ifdef _DEBUGMODE_KERNELPRINTS//4
			unsigned int tots_ = 0; unsigned int tots2_ = 0;
			for(unsigned int t=0; t<EDGE_UPDATES_DRAMBUFFER_SIZE; t++){ for(unsigned int inst=0; inst<1; inst++){ for(unsigned int v=0; v<1; v++){ if(URAM_map[inst][v][t].size > 0){ cout<<"------ URAM_map["<<inst<<"]["<<v<<"]["<<t<<"].offset: "<<URAM_map[inst][v][t].offset<<", URAM_map["<<inst<<"]["<<v<<"]["<<t<<"].size: "<<URAM_map[inst][v][t].size<<endl; tots_ += 1; tots2_ += URAM_map[inst][v][t].size; }}}}
			cout<<"------ summary: used "<<tots_<<" slots (of 8192 slots). tots2: "<<tots2_<<endl;
			#endif 
		
			// load edge updates to URAM
			unsigned int batch_sz = 128; // 256
			#ifdef ___ENABLE___MAPEDGEUPDATESTOURAM___
			if(max_sz_eu > BLOCKRAM_SIZE){ max_sz_eu = BLOCKRAM_SIZE; }
			LOAD_EDGEUPDATES_LOOP1: for(unsigned int t1=0; t1<(max_sz_eu + (batch_sz-1)) / batch_sz; t1++){
				LOAD_EDGEUPDATES_LOOP1B: for(unsigned int t2=0; t2<batch_sz; t2++){ // FIXHANG.
				#pragma HLS PIPELINE II={{context['II_LOAD_EDGEUPDATES_LOOP1']}}
					unsigned int t = (t1 * batch_sz) + t2;
					for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
					#pragma HLS UNROLL
						for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
						#pragma HLS UNROLL
							edge_update_type edge_update = edge_updates_buffer_vecs[inst][t].data[v];
							#ifdef _DEBUGMODE_CHECKS3
							if(edge_update.srcvid != INVALIDDATA && t < max_sz_eu){ checkoutofbounds("acts_kernel::ERROR 8813::", edge_update.srcvid, MAX_UPARTITION_SIZE, t, v, inst); }
							if(edge_update.srcvid != INVALIDDATA && t < max_sz_eu){ checkoutofbounds("acts_kernel::ERROR 7713::", edge_update.srcvid, EDGE_UPDATES_DRAMBUFFER_SIZE, t, v, inst); }
							#endif
							
							map_t map; map.size = 0;
							if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ map = URAM_map[inst][v][edge_update.srcvid]; }
							
							if(map.size > 0 && t < max_sz_eu){	
								unsigned int edge_hashid = hash2_edge(map, edge_update.srcvid, edge_update.dstvid, padding_factor); 

								#ifdef _DEBUGMODE_KERNELPRINTS//4 
								if(inst==0 && p_u==0 && llp_set==0 && t<2){ cout<<"$$$ load-edge-updates::["<<inst<<"]["<<t<<"]["<<v<<"]: [edge_update-update: srcvid: "<<edge_update.srcvid<<", dstvid: "<<edge_update.dstvid<<"]---[edge_hashid: "<<edge_hashid<<"]"<<endl; }								
								#endif
								
								edge_update_type former_edge_update = URAM_edgeupdates[inst][v][edge_hashid];
								edge_update_type new_edge_update;
								if(former_edge_update.srcvid == INVALIDDATA){ new_edge_update = edge_update; } else { new_edge_update = former_edge_update; }
								
								URAM_edgeupdates[inst][v][edge_hashid] = new_edge_update;
								edgeupdates_hash_ids[inst][v][t] = edge_hashid;
								
								if(former_edge_update.srcvid != INVALIDDATA){
									#ifdef _DEBUGMODE_CHECKS3
									checkoutofbounds("apply-edge-updates::ERROR 25173::", MISSBUFFER_edgeupdates_index[inst][v], BLOCKRAM_SIZE, NAp, NAp, NAp);
									#endif
									MISSBUFFER_edgeupdates[inst][v][MISSBUFFER_edgeupdates_index[inst][v]] = edge_update;
									MISSBUFFER_edgeupdates_index[inst][v] += 1; 
								}
							}
							if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGEUPDATES_LOADED___, 1); }
						}
					}
				}
			}
			#endif 
			
			// print summary
			#ifdef _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
			if(false){ for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<"[AFTERR]: MISSBUFFER_edgeupdates_index[0]["<<v<<"]: "<<MISSBUFFER_edgeupdates_index[0][v]<<endl; }}
			unsigned int total_num_misses_ = 0; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ total_num_misses_ += MISSBUFFER_edgeupdates_index[0][v]; }
			cout<<"[Edge-updates miss summary]: total number of misses: "<<total_num_misses_<<" (of "<<max_sz_eu * EDGE_PACK_SIZE<<")"<<endl;
			#endif 
			// exit(EXIT_SUCCESS);
			
			// apply edge updates to edges
			unsigned int num_hits = 0; unsigned int num_misses = 0;
			#ifdef ___ENABLE___APPLY_EDGEUPDATES___
			PROCESS_EDGEUPDATES_MAINLOOP1D: for(unsigned int t=0; t<max_sz; t++){ // max_sz // 2223
			#pragma HLS PIPELINE II={{context['II_APPLY_EDGEUPDATES_MAINLOOP1D']}}
				dretrievemanyfromB_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets, t, edge3_vecs, {% include '___HBM___ARGS___.template' %});
				
				PROCESS_EDGEUPDATES_LOOP1E: for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					PROCESS_EDGEUPDATES_LOOP1F: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
					#pragma HLS UNROLL
						edge3_type edge = edge3_vecs[inst].data[v];
						unsigned int weight = edge.weight;	

						map_t map; map.size = 0;
						if(edge.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ map = URAM_map[inst][v][edge.srcvid]; }
						
						if(map.size > 0){
							unsigned int edge_hashid = hash2_edge(map, edge.srcvid, edge.dstvid, padding_factor);
							unsigned int eu_weight = 1;
							
							#ifdef _DEBUGMODE_KERNELPRINTS//4 
							if(inst==0 && p_u==0 && llp_set==0 && t<8){ cout<<"### process-edge-updates::["<<inst<<"]["<<t<<"]["<<v<<"]:edges: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<"]---[edge: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<"]---[edge_hashid: "<<edge_hashid<<"]"<<endl; }								
							#endif 
							
							edge_update_type edge_update = URAM_edgeupdates[inst][v][edge_hashid];
							if(edge.srcvid == edge_update.srcvid && edge.dstvid == edge_update.dstvid){
								edge3_vecs[inst].data[v].weight += eu_weight;									
								#ifdef _DEBUGMODE_CHECKS3
								if(inst==0){ num_hits += 1; }
								if(inst==0 && false){ cout<<"[process-edge-updates:: hit seen @ ["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
								#endif 
								if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGEUPDATES_APPLIED___, 1); }
							} else {
								if(edge_update.srcvid == INVALIDDATA || URAM_map[inst][v][edge.srcvid].size == 0){
									#ifdef _DEBUGMODE_CHECKS3
									if(inst==0){ num_hits += 1; }
									#endif 
								} else {		
									MISSBUFFER_edges[inst][v][MISSBUFFER_edges_index[inst][v]] = edge; // FIXME.
									// MISSBUFFER_edges_index[inst][v] += 1;
									#ifdef _DEBUGMODE_CHECKS3
									if(inst==0){ num_misses += 1; }
									checkoutofbounds("utility::ERROR 25183::", MISSBUFFER_edges_index[inst][v], BLOCKRAM_SIZE, NAp, NAp, NAp);
									if(inst==0 && false){ cout<<"[process-edge-updates:: miss seen @ ["<<inst<<"]["<<v<<"]["<<t<<"]: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
									#endif 
								}
							}
						}
					}
				}
			
				dinsertmanytoA_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets, t, edge3_vecs, {% include '___HBM___ARGS___.template' %}); // FIXME
				update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___ECPROCESSEDGES___, 1);
			}
			#endif 
			// exit(EXIT_SUCCESS);
			
			#ifdef _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
			if(false){ for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<"[AFTER]: MISSBUFFER_edges_index[0]["<<v<<"]: "<<MISSBUFFER_edges_index[0][v]<<endl; }}
			unsigned int total_num_misses = 0; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ total_num_misses += MISSBUFFER_edges_index[0][v]; }
			cout<<"[Edges miss summary]: total number of misses: "<<total_num_misses<<" (of "<<max_sz * EDGE_PACK_SIZE<<")"<<endl;
			#endif 
			
			// prepare for next round
			#ifdef ___ENABLE___PREPAREFORNEXTROUND___
			// prepare for next round (save misses - edge updates)
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ maxs[n] = 0; }
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL
				for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(maxs[n] < MISSBUFFER_edgeupdates_index[n][v]){ maxs[n] = MISSBUFFER_edgeupdates_index[n][v]; }}
			}
			unsigned int max = 0; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max < maxs[n]){ max = maxs[n]; }}
			SAVEMISSES_EDGEUPDATES_MAINLOOP1D: for(unsigned int t=0; t<max; t++){ 
			#pragma HLS PIPELINE II={{context['II_SAVEMISSES_EDGEUPDATES_MAINLOOP1']}}
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
					#pragma HLS UNROLL		
						if(t< MISSBUFFER_edgeupdates_index[inst][v]){ edge_update_vecs[inst].data[v] = MISSBUFFER_edgeupdates[inst][v][t]; } 
						else { edge_update_vecs[inst].data[v] = invalid_edgeupdate_data; }
					}
				}
				dinsertmany_edgeupdates(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATES], offsets_eu, t, edge_update_vecs, {% include '___HBM___ARGS___.template' %});
			}
			// max_sz_eu = max;
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ 
			#pragma HLS UNROLL
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL
					max_sz_eus[n][v] = MISSBUFFER_edgeupdates_index[n][v];
				}
			}
			#endif 
			
			// prepare for next round (save misses - edges)
			#ifdef ___ENABLE___PREPAREFORNEXTROUND___XXX
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ maxs[n] = 0; }
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL
				for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(maxs[n] < MISSBUFFER_edges_index[n][v]){ maxs[n] = MISSBUFFER_edges_index[n][v]; }}
			}
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){ if(max < maxs[n]){ max = maxs[n]; }}
			cout<<"------------------------------------- apply-edge-updates: max: "<<max<<endl;
			edge3_vec_dt edge_vecs[NUM_VALID_PEs];
			#pragma HLS ARRAY_PARTITION variable=edge_vecs complete
			SAVEMISSES_EDGES_MAINLOOP1D: for(unsigned int t=0; t<max; t++){ 
			#pragma HLS PIPELINE II={{context['II_SAVEMISSES_EDGES_MAINLOOP1']}}
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
					#pragma HLS UNROLL
						if(t< MISSBUFFER_edges_index[inst][v]){ edge_vecs[inst].data[v] = MISSBUFFER_edges[inst][v][t]; } 
						else { edge_vecs[inst].data[v] = invalid_edge_data; }
					}
				}
				dinsertmanytoB_actpackedges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKEDGES], offsets_eu, t, edge_vecs, {% include '___HBM___ARGS___.template' %}); // FIXME
			}
			#endif 
			
			// reset URAM buffers
			unsigned int countZ = 0;
			MY_LOOP1583: for(unsigned int t=0; t<max_sz_eu; t++){
			#pragma HLS PIPELINE II={{context['II_APPLY_EDGEUPDATES_RESETURAMBUFFERS_MAINLOOP1']}}
				for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
				#pragma HLS UNROLL
					for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
					#pragma HLS UNROLL
						edge_update_type edge_update = edge_updates_buffer_vecs[inst][t].data[v];
						if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ 
							unsigned int edge_hashid = edgeupdates_hash_ids[inst][v][t];
							URAM_map[inst][v][edge_update.srcvid].offset = 0; 
							URAM_map[inst][v][edge_update.srcvid].size = 0;
							URAM_edgeupdates[inst][v][edge_hashid].srcvid = INVALIDDATA; //
							URAM_edgeupdates[inst][v][edge_hashid].dstvid = INVALIDDATA; //
						}
					}
				}
			}
		} // c 
		// exit(EXIT_SUCCESS);
	} // llp_id
	// exit(EXIT_SUCCESS); 
} // llp_set
// exit(EXIT_SUCCESS); 
// } // p_u
// exit(EXIT_SUCCESS); 





















						