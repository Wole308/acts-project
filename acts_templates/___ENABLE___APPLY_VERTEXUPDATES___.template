uint512_vec_dt updates_vecs[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable=updates_vecs complete
max_limit = 0; for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ limits[inst] = updatesptrs[p_v].size; } for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ if(max_limit < limits[inst]){ max_limit = limits[inst]; }}

#ifdef _DEBUGMODE_KERNELPRINTS//4 
if(en == true){ cout<<"### applying vertex updates in vpartition "<<p_v<<": [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"]"<<endl; } 
#endif 

unsigned int updates_offset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__VERTEXUPDATES] + updatesptrs[p_v].offset;
unsigned int edge_dir = 1;
APPLY_UPDATES_LOOP1: for(unsigned int t=0; t<max_limit; t++){
#pragma HLS PIPELINE II={{context['II_APPLY_UPDATES_LOOP1']}}	
	dretrievemany_udatesdram(updates_offset + t, updates_vecs, {% include '___HBM___ARGS___.template' %}); // NEW
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){		
			#pragma HLS UNROLL
				unsigned int dstvid_lp; if(algo == HITS && edge_dir == 1){ dstvid_lp = updates_vecs[inst].data[v].key * 2; } else { dstvid_lp = updates_vecs[inst].data[v].key; }
				if(dstvid_lp >= MAX_APPLYPARTITION_SIZE){ dstvid_lp = 0; }
				unsigned int dstvid_lpv = dstvid_lp / EDGE_PACK_SIZE;	
				
				#ifdef _DEBUGMODE_CHECKS3
				if(t < limits[inst]){ checkoutofbounds("acts_kernel::ERROR 727a::", dstvid_lp, MAX_APPLYPARTITION_SIZE, NAp, inst, updates_vecs[inst].data[v].key); checkoutofbounds("acts_kernel::ERROR 727b::", dstvid_lpv, MAX_APPLYPARTITION_VECSIZE, NAp, inst, updates_vecs[inst].data[v].key); }					
				#endif
				vprop_dest_t vprop = URAM_vprop[inst][v][dstvid_lpv];
				vprop_dest_t newprop; newprop.prop = INVALIDDATA; 
				unsigned int new_vprop = reduce_funcG(vprop, updates_vecs[inst].data[v].value, globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM]);
				if(t < limits[inst]){ 
					#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
					if(t < 1024){ std::cout<<"APPLY (ACT-PACK) UPDATE SEEN @: t: "<<t<<", inst: ["<<inst<<"], v: ["<<v<<"]: dstvid_lp: "<<dstvid_lp<<", dstvid_lpv: "<<dstvid_lpv<<", new_vprop: "<<new_vprop<<", update["<<t<<"].key: "<<updates_vecs[inst].data[v].key<<", update["<<t<<"].value: "<<updates_vecs[inst].data[v].value<<std::endl; }						
					#endif
					newprop.prop = new_vprop; 
				}
				URAM_vprop[inst][v][dstvid_lpv].prop = newprop.prop; 
				#ifdef _DEBUGMODE_CHECKS3
				if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___APPLYUPDATES___, 1); }
				#endif 
			}
		}
	
	#ifdef ___ENABLE___IMPORT_EXPORT___
	hidden_import_and_export_function(t, import_offset, export_offset, action.size_import_export, HBM_centerA, HBM_centerB, HBM_import, HBM_export, action);
	#endif 
}		
// exit(EXIT_SUCCESS);	





