keyvalue_t frontier_data[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable = frontier_data complete dim=0

COLLECT_AND_SAVE_FRONTIERS_LOOP1: for(unsigned int local_subpartitionID=0; local_subpartitionID<num_subpartition_per_partition; local_subpartitionID+=1){
	unsigned int upartitionID = (p_v * num_subpartition_per_partition) + local_subpartitionID;
	unsigned int foffset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__NFRONTIERS] + (p_v * MAX_APPLYPARTITION_VECSIZE);
	unsigned int offset = local_subpartitionID * vdata_subpartition_vecsize;

	// cout<<">>> collect-and-save-frontiers ++++++++++++++++++ vdata_subpartition_vecsize: "<<vdata_subpartition_vecsize<<endl;
	COLLECT_FRONTIERS_LOOP: for(unsigned int t=0; t<vdata_subpartition_vecsize; t++){
	// cout<<">>> collect-and-save-frontiers ----------------- local_subpartitionID: "<<local_subpartitionID<<"(of "<<num_subpartition_per_partition<<"), t: "<<t<<"(of "<<vdata_subpartition_vecsize<<")"<<endl;
	#pragma HLS PIPELINE II={{context['II_COLLECT_FRONTIERS_LOOP1B']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				// vprop_t vprop; //
				vprop_t vprop =  retrieve_vdatabuffer(v, t, URAM_vprop[inst]); // FIXME.
				unsigned int vid = 0; //FIXME.
				
				#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
				std::cout<<"COLLECT FRONTIER INFORMATION SEEN @: inst: ["<<inst<<"]: t: "<<t<<", v: "<<v<<", p__u__: "<<(vid / MAX_UPARTITION_SIZE)<<", vid: "<<vid<<std::endl;
				#endif
				#ifdef _DEBUGMODE_CHECKS3
				checkoutofbounds("acts_kernel::ERROR 21021::", t, MAX_VDATA_SUBPARTITION_VECSIZE, NAp, NAp, NAp);
				#endif 
				frontier_t actvv; actvv.key = vid; actvv.value = vprop.prop; 
				insert_nfrontierbuffer(v, t, actvv, nfrontier_buffer[inst]); 
				// nfrontier_buffer[inst][v][t] = actvv;
			}
		}
		update_bramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___, 1);
	}
	
	SAVE_FRONTIERS_LOOP: for(unsigned int t=0; t<vdata_subpartition_vecsize; t++){
	// cout<<">>> collect-and-save-frontiers b ----------------- local_subpartitionID: "<<local_subpartitionID<<"(of "<<num_subpartition_per_partition<<"), t: "<<t<<"(of "<<vdata_subpartition_vecsize<<")"<<endl;
	#pragma HLS PIPELINE II={{context['II_SAVE_FRONTIERS_LOOP2B']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			#ifdef _DEBUGMODE_CHECKS3
			checkoutofbounds("acts_kernel::ERROR 61021::", t, MAX_VDATA_SUBPARTITION_VECSIZE, NAp, NAp, NAp);
			#endif 
			retrievevec_nfrontierbuffer(t, frontier_data[inst], nfrontier_buffer[inst]);  // FIXME.
		}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
		#pragma HLS UNROLL
			offsets2[inst] = foffset + offset + t;
		}
		#ifdef _DEBUGMODE_CHECKS3
		checkoutofbounds("acts_kernel::ERROR 71021::", offsets2[0], HBM_CHANNEL_SIZE, NAp, NAp, NAp);
		#endif 
		dinsertmany_nfrontierdram(offsets2, t, frontier_data, ens, {% include '___HBM___ARGS___.template' %}); // FIXME.
	}
	
	for(unsigned int n=0; n<NUM_VALID_PEs; n++){
	#pragma HLS UNROLL
		#ifdef _DEBUGMODE_CHECKS3
		checkoutofbounds("acts_kernel::ERROR 76021::", upartitionID, MAX_NUM_UPARTITIONS, NAp, NAp, NAp);
		#endif 
		nfrontier_dram___size[n][upartitionID] = vdata_subpartition_vecsize; 
	}
}
				