/////////////////////////////////////////
#ifndef FPGA_IMPL
void checkoutofbounds(string message, unsigned int data, unsigned int upper_bound, unsigned int msgdata1, unsigned int msgdata2, unsigned int msgdata3){
	#ifdef _DEBUGMODE_CHECKS3
	if(data >= upper_bound){ std::cout<<"utility::checkoutofbounds: ERROR. out of bounds. message: "<<message<<", data: "<<data<<", upper_bound: "<<upper_bound<<", msgdata1: "<<msgdata1<<", msgdata2: "<<msgdata2<<", msgdata3: "<<msgdata3<<std::endl; exit(EXIT_FAILURE); }			
	#endif 
}	
#endif 

unsigned int hash_edge(unsigned int srcvid, unsigned int dstvid, unsigned int index){
	unsigned int group = dstvid % 512;
	// unsigned int edge_hashid = (group * 16) + (dstvid % 16);
	unsigned int edge_hashid = (group * 16) + (srcvid % 16);
	
	#ifdef _DEBUGMODE_CHECKS3
	checkoutofbounds("utility::ERROR 25133::", edge_hashid, EDGE_UPDATES_DRAMBUFFER_SIZE, srcvid, dstvid, NAp);
	#endif

	return edge_hashid; 
}	

unsigned int hash2_edge(map_t URAM_map, unsigned int srcvid, unsigned int dstvid, unsigned int padding_factor){
#pragma HLS INLINE
	unsigned int allotted_hashspace = URAM_map.size * padding_factor; 
	#ifdef _DEBUGMODE_CHECKS3
	if(URAM_map.size == 0){ cout<<"-------------------------------- hash2_edge: URAM_map.size == 0. EXITING..."<<endl; exit(EXIT_FAILURE); }
	if(padding_factor == 0){ cout<<"-------------------------------- hash2_edge: padding_factor == 0. EXITING..."<<endl; exit(EXIT_FAILURE); }
	// if(dstvid == 0){ cout<<"-------------------------------- hash2_edge: srcvid = 0. dstvid == 0. EXITING..."<<endl; exit(EXIT_FAILURE); }
	#endif 
	unsigned int edge_hashid = URAM_map.offset + (dstvid % allotted_hashspace); 
	#ifdef _DEBUGMODE_CHECKS3
	checkoutofbounds("utility::ERROR 779911::", edge_hashid, EDGE_UPDATES_DRAMBUFFER_SIZE, dstvid, URAM_map.offset, URAM_map.size); 
	#endif
	return edge_hashid;							
}

void {{context['classname__acts']}}rearrangeLayoutV16x16B(unsigned int s, keyvalue_t in[NUM_VALID_HBM_CHANNELS][EDGE_PACK_SIZE], keyvalue_t out[NUM_VALID_HBM_CHANNELS][EDGE_PACK_SIZE]){
	if(s==1){
		{%for v2 in context['NUM_VALID_HBM_CHANNELS_seq']%}
		{%for v3 in context['EDGE_PACK_SIZE_seq']%}
		out[{{    (1+v2) %  (context['NUM_VALID_HBM_CHANNELS'])  }}][{{v3}}] = in[{{v2}}][{{v3}}]; 
		{%endfor%}	
		{%endfor%}
	} else {
		{%for v2 in context['NUM_VALID_HBM_CHANNELS_seq']%}
		{%for v3 in context['EDGE_PACK_SIZE_seq']%}
		out[{{v2}}][{{v3}}] = in[{{v2}}][{{v3}}]; 
		{%endfor%}	
		{%endfor%}
	}
	return;
}
void {{context['classname__acts']}}rearrangeLayoutVx16B(unsigned int s, keyvalue_t in[EDGE_PACK_SIZE], keyvalue_t out[EDGE_PACK_SIZE]){
	#ifndef FPGA_IMPL
	checkoutofbounds("acts_kernel::rearrangeLayoutVx16B::ERROR 2925::", s, EDGE_PACK_SIZE, NAp, NAp, NAp);
	#endif 
	{%for v in context['EDGE_PACK_SIZE_seq']%}
	{%if(v>0)%}else{%endif%} {%if(v<context['EDGE_PACK_SIZE']-1)%}if(s=={{v}}){%endif%}{ 
		{%for v2 in context['EDGE_PACK_SIZE_seq']%}
		out[{{    (v+v2) %  (context['EDGE_PACK_SIZE'])  }}] = in[{{v2}}]; 
		{%endfor%}
	}
	{%endfor%}
	return;
}

unsigned int min_(unsigned int val1, unsigned int val2){
	#pragma HLS INLINE
	if(val1 < val2){ return val1; }
	else { return val2; }
}
void update_dramnumclockcycles(unsigned int _NUMCLOCKCYCLES_[2][32], unsigned int x, unsigned int clock_cycles){
	#ifdef _DEBUGMODE_CHECKS3
	_NUMCLOCKCYCLES_[0][x] += clock_cycles;
	#endif
}
void update_bramnumclockcycles(unsigned int _NUMCLOCKCYCLES_[2][32], unsigned int x, unsigned int clock_cycles){
	#ifdef _DEBUGMODE_CHECKS3
	_NUMCLOCKCYCLES_[0][x] += clock_cycles;
	// _NUMCLOCKCYCLES_[1][x] += clock_cycles;
	#endif
}

/////////////////////////////////////////

value_t process_func_pr(vprop_t uprop, value_t edgew){
	#pragma HLS INLINE 
	return uprop.prop + uprop.degree; // FIXME.
}
value_t reduce_func_pr(vprop_dest_t vprop, value_t res){
	#pragma HLS INLINE 
	return vprop.prop + res; // 6.11; // 
}

value_t process_func_spmv(vprop_t uprop, value_t edgew){ // see graphlily slides
	#pragma HLS INLINE 
	return uprop.prop * edgew;
}
value_t reduce_func_spmv(vprop_dest_t vprop, value_t res){
	#pragma HLS INLINE 
	return vprop.prop + res;
}

value_t process_func_hits(vprop_t uprop, value_t edgew){
	#pragma HLS INLINE 
	return uprop.prop;
}
value_t reduce_func_hits(vprop_dest_t vprop, value_t res){
	#pragma HLS INLINE 
	return vprop.prop + res;
}

value_t process_func_sssp(vprop_t uprop, value_t edgew){
	#pragma HLS INLINE 
	value_t res = uprop.prop + edgew;
	return res;
}
value_t reduce_func_sssp(vprop_dest_t vprop, value_t res){
	#pragma HLS INLINE 
	if(res < vprop.prop){ return res; } else { return vprop.prop; }
}

value_t process_funcG(vprop_t uprop, value_t edgew, unsigned int algo){
	#pragma HLS INLINE 
	#ifdef BAKE_PAGERANK_ALGORITHM_FUNCS
	return process_func_pr(uprop, edgew);	
	#endif 
	#ifdef BAKE_SPMV_ALGORITHM_FUNCS
	return process_func_spmv(uprop, edgew);
	#endif 
	#ifdef BAKE_HITS_ALGORITHM_FUNCS
	return process_func_hits(uprop, edgew);
	#endif 
}
value_t reduce_funcG(vprop_dest_t vprop, value_t res, unsigned int algo){
	#pragma HLS INLINE 
	#ifdef BAKE_PAGERANK_ALGORITHM_FUNCS
	return reduce_func_pr(vprop, res);	
	#endif 
	#ifdef BAKE_SPMV_ALGORITHM_FUNCS
	return reduce_func_spmv(vprop, res);
	#endif 
	#ifdef BAKE_HITS_ALGORITHM_FUNCS	
	return reduce_func_hits(vprop, res);	
	#endif 
}

value_t process_func(unsigned int GraphAlgo, vprop_t uprop, vprop_dest_t vprop, value_t edgew, unsigned int algo){
	#pragma HLS INLINE 
	if(GraphAlgo == PAGERANK){
		return process_func_pr(uprop, edgew);
	} else if(GraphAlgo == SPMV){
		return process_func_spmv(uprop, edgew);
	} else if(GraphAlgo == HITS){
		return process_func_hits(uprop, edgew);
	} else if(GraphAlgo == SSSP){
		return process_func_sssp(uprop, edgew);
	} else {
		return process_func_pr(uprop, edgew);
	}
}
value_t reduce_func(unsigned int GraphAlgo, vprop_dest_t vprop, value_t res, unsigned int algo){
	#pragma HLS INLINE 
	if(GraphAlgo == PAGERANK){ 
		return reduce_func_pr(vprop, res);
	} else if(GraphAlgo == SPMV){
		return reduce_func_spmv(vprop, res);
	} else if(GraphAlgo == HITS){
		return reduce_func_hits(vprop, res);
	} else if(GraphAlgo == SSSP){
		return reduce_func_sssp(vprop, res);
	} else {
		return reduce_func_pr(vprop, res);
	}
}	
