#define ___ENABLE___RESETBUFFERSATSTART___ 
#define ___ENABLE___CLEAR_COUNTERS___
#define ___ENABLE___PROCESSEDGES___ 
#define ___ENABLE___READ_FRONTIER_PROPERTIES___
#define ___ENABLE___RESET_BUFFERS___
#define ___ENABLE___ECPROCESSEDGES___II1___ 
#define ___ENABLE___APPLYUPDATESMODULE___ 
#define ___ENABLE___READ_DEST_PROPERTIES___ 	
	#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___ 
		#define ___ENABLE___APPLYVERTEXUPDATES_AND_APPLYEDGES___II1___
	#else 
		#define ___ENABLE___APPLYUPDATES___II1___
	#endif 
	#define ___ENABLE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___ 
	#define ___ENABLE___SAVE_DEST_PROPERTIES___ 
// #define ___ENABLE___GATHER_FRONTIERINFOS___ // FIXME^
#define ___ENABLE___REPORT_STATISTICS___
// #define ___ENABLE___IMPORT_EXPORT___
#define _____DEBUG_____	

#define MAXVALID_APPLYPARTITION_VECSIZE (MAX_APPLYPARTITION_VECSIZE >> POW_VALID_VDATA)
#define MAXVALID_VERTEXUPDATES_BUFFER_SIZE (VERTEXUPDATES_BUFFER_SIZE >> POW_VALID_VDATA)

unsigned int num_prints = 16;	

#ifdef ___RUNNING_FPGA_SYNTHESIS___ // FPGA_IMPL
#define MY_IFDEF_NFRONTIER() keyvalue_t nfrontier_buffer[EDGE_PACK_SIZE][MAX_VDATA_SUBPARTITION_VECSIZE]
#define MY_IFDEF_CFRONTIER_TMP() keyvalue_t URAM_frontiers[EDGE_PACK_SIZE][MAXVALID_APPLYPARTITION_VECSIZE]
#define MY_IFDEF_CFRONTIER() keyvalue_t cfrontier_buffer[NUM_VALID_PEs][MAXVALID_APPLYPARTITION_VECSIZE]
#define MY_IFDEF_UPDATESTMPBUFFER() keyvalue_t updates_buffer2[UPDATES_BUFFER_PACK_SIZE][UPDATES_BUFFER_SIZE]	
#define MY_IFDEF_VPTRBUFFER() vtr_t vptr_buffer[VPTR_BUFFER_SIZE]
#define MY_IFDEF_EDGESBUFFER() edge3_type edges_buffer[EDGE_PACK_SIZE][EDGE_BUFFER_SIZE]
#define MY_IFDEF_EDGEUPDATESBUFFER() edge_update_type URAM_edges[EDGE_PACK_SIZE][EDGE_UPDATES_DRAMBUFFER_SIZE]
#define MY_IFDEF_VDATABUFFER() vprop_t URAM_vprop[EDGE_PACK_SIZE][MAXVALID_APPLYPARTITION_VECSIZE]
#else
#define MY_IFDEF_NFRONTIER() keyvalue_t * nfrontier_buffer[EDGE_PACK_SIZE]
#define MY_IFDEF_CFRONTIER_TMP() keyvalue_t * URAM_frontiers[EDGE_PACK_SIZE]
#define MY_IFDEF_CFRONTIER() keyvalue_t * cfrontier_buffer[NUM_VALID_PEs]
#define MY_IFDEF_UPDATESTMPBUFFER() keyvalue_t * updates_buffer2[UPDATES_BUFFER_PACK_SIZE]
#define MY_IFDEF_VPTRBUFFER() vtr_t * vptr_buffer
#define MY_IFDEF_EDGESBUFFER() edge3_type * edges_buffer[EDGE_PACK_SIZE]
#define MY_IFDEF_EDGEUPDATESBUFFER() edge_update_type * URAM_edges[EDGE_PACK_SIZE]
#define MY_IFDEF_VDATABUFFER() vprop_t * URAM_vprop[EDGE_PACK_SIZE]			
#endif

#ifdef ___RUNNING_FPGA_SYNTHESIS___ // FPGA_IMPL
#define MY_IFDEF_TOPLEVELFUNC() void top_function( \
	{% include '___HBM___PARAMS___.template' %}, \
	{% include '___HBM___PARAMS___SRC___.template' %}, \
	unsigned int fpga, unsigned int module, unsigned int graph_iteration, unsigned int start_pu, unsigned int size_pu, unsigned int skip_pu, unsigned int start_pv_fpga, unsigned int start_pv, unsigned int size_pv, unsigned int start_llpset, unsigned int size_llpset, unsigned int start_llpid, unsigned int size_llpid, unsigned int start_gv_fpga, unsigned int start_gv, unsigned int size_gv, unsigned int id_process, unsigned int id_import, unsigned int id_export, unsigned int size_import_export, unsigned int status, unsigned int numfpgas, unsigned int command, \
	unsigned int mask0, unsigned int mask1, unsigned int mask2, unsigned int mask3, unsigned int mask4, unsigned int mask5, unsigned int mask6, unsigned int mask7 \
	)
#else
#define MY_IFDEF_TOPLEVELFUNC() unsigned int acts_kernel::top_function( \
	{% include '___HBM___PARAMS___.template' %}, \
	{% include '___HBM___PARAMS___SRC___.template' %}, \
	unsigned int fpga, unsigned int module, unsigned int graph_iteration, unsigned int start_pu, unsigned int size_pu, unsigned int skip_pu, unsigned int start_pv_fpga, unsigned int start_pv, unsigned int size_pv, unsigned int start_llpset, unsigned int size_llpset, unsigned int start_llpid, unsigned int size_llpid, unsigned int start_gv_fpga, unsigned int start_gv, unsigned int size_gv, unsigned int id_process, unsigned int id_import, unsigned int id_export, unsigned int size_import_export, unsigned int status, unsigned int numfpgas, unsigned int command, \
	unsigned int mask0, unsigned int mask1, unsigned int mask2, unsigned int mask3, unsigned int mask4, unsigned int mask5, unsigned int mask6, unsigned int mask7, \
	unsigned int report_statistics[64])					
#endif

#ifndef ___RUNNING_FPGA_SYNTHESIS___
unsigned int * globalparams_debug;  
acts_kernel::acts_kernel(universalparams_t _universalparams){
	utilityobj = new utility(_universalparams);
	universalparams = _universalparams;
	algorithmobj = new algorithm();
}
acts_kernel::~acts_kernel(){} 
#endif 

{% include '___ENABLE___UTILFUNCS___.template' %}	

{% include '___ENABLE___ACCESSHBM___.template' %}	

unsigned int owner_fpga(unsigned int dstvid){
	return 0; // FIXME.
}

unsigned int owner_vpartition(unsigned int dstvid, unsigned int msg){
	// return 0;
	return msg; // FIXME.
}

extern "C" {	
MY_IFDEF_TOPLEVELFUNC(){	
{%for i in context['NUM_VALID_HBM_CHANNELS_seq']%}
#pragma HLS INTERFACE m_axi port = HBM_EDGESA{{i}} offset = slave bundle = gmem{{2*i}}
#pragma HLS INTERFACE m_axi port = HBM_EDGESB{{i}} offset = slave bundle = gmem{{2*i+1}}
{%endfor%}
{%for i in context['NUM_VALID_HBM_CHANNELS_seq']%}
#pragma HLS INTERFACE m_axi port = HBM_SRCA{{i}} offset = slave bundle = gmem{{2*i}}
#pragma HLS INTERFACE m_axi port = HBM_SRCB{{i}} offset = slave bundle = gmem{{2*i+1}}
{%endfor%}

{%for i in context['NUM_VALID_HBM_CHANNELS_seq']%}
#pragma HLS INTERFACE s_axilite port = HBM_EDGESA{{i}}
#pragma HLS INTERFACE s_axilite port = HBM_EDGESB{{i}}
{%endfor%}
{%for i in context['NUM_VALID_HBM_CHANNELS_seq']%}
#pragma HLS INTERFACE s_axilite port = HBM_SRCA{{i}}
#pragma HLS INTERFACE s_axilite port = HBM_SRCB{{i}}
{%endfor%}

#pragma HLS INTERFACE s_axilite port = fpga
#pragma HLS INTERFACE s_axilite port = module
#pragma HLS INTERFACE s_axilite port = graph_iteration
#pragma HLS INTERFACE s_axilite port = start_pu 
#pragma HLS INTERFACE s_axilite port = size_pu
#pragma HLS INTERFACE s_axilite port = skip_pu
#pragma HLS INTERFACE s_axilite port = start_pv_fpga
#pragma HLS INTERFACE s_axilite port = start_pv
#pragma HLS INTERFACE s_axilite port = size_pv
#pragma HLS INTERFACE s_axilite port = start_llpset
#pragma HLS INTERFACE s_axilite port = size_llpset 
#pragma HLS INTERFACE s_axilite port = start_llpid
#pragma HLS INTERFACE s_axilite port = size_llpid
#pragma HLS INTERFACE s_axilite port = start_gv_fpga
#pragma HLS INTERFACE s_axilite port = start_gv
#pragma HLS INTERFACE s_axilite port = size_gv
#pragma HLS INTERFACE s_axilite port = id_process
#pragma HLS INTERFACE s_axilite port = id_import
#pragma HLS INTERFACE s_axilite port = id_export
#pragma HLS INTERFACE s_axilite port = size_import_export
#pragma HLS INTERFACE s_axilite port = status
#pragma HLS INTERFACE s_axilite port = numfpgas
#pragma HLS INTERFACE s_axilite port = command
#pragma HLS INTERFACE s_axilite port = mask0
#pragma HLS INTERFACE s_axilite port = mask1
#pragma HLS INTERFACE s_axilite port = mask2
#pragma HLS INTERFACE s_axilite port = mask3
#pragma HLS INTERFACE s_axilite port = mask4
#pragma HLS INTERFACE s_axilite port = mask5
#pragma HLS INTERFACE s_axilite port = mask6
#pragma HLS INTERFACE s_axilite port = mask7
#pragma HLS INTERFACE s_axilite port = return

	#ifdef _DEBUGMODE_KERNELPRINTS4	
	unsigned int _K0 = 1; // <lowerlimit:1, upperlimit:_GF_BATCH_SIZE>
	unsigned int _K1 = 2; // NUM_FPGAS // <lowerlimit:1, upperlimit:NUM_FPGAS*>
	unsigned int _AU_BATCH_SIZE = 2; 
	unsigned int _GF_BATCH_SIZE = _AU_BATCH_SIZE * universalparams.GLOBAL_NUM_PEs_; // 6 (i.e., 24 upartitions)
	unsigned int _IMPORT_BATCH_SIZE = (_GF_BATCH_SIZE / _K0); // 6
	unsigned int _PE_BATCH_SIZE = _IMPORT_BATCH_SIZE; // 6
	unsigned int _EXPORT_BATCH_SIZE = _IMPORT_BATCH_SIZE; // (_GF_BATCH_SIZE * _K1); // 24
	unsigned int _IMPORT_EXPORT_GRANULARITY_VECSIZE = 8184;
	#endif 
	
	#ifdef _DEBUGMODE_KERNELPRINTS4	
	if(start_pu != NAp && fpga < num_prints) { cout<<"acts started [processing stage]: fpga: "<<fpga<<", start_pu: "<<start_pu<<", size_pu: "<<size_pu<<", start_pv_fpga: "<<start_pv_fpga<<", start_pv: "<<start_pv<<", size_pv: "<<size_pv<<", start_gv_fpga: "<<start_gv_fpga<<", start_gv: "<<start_gv<<", size_gv: "<<size_gv<<endl; }
	if(start_pv != NAp && fpga < num_prints) { cout<<"acts started [applying stage]: fpga: "<<fpga<<", start_pu: "<<start_pu<<", size_pu: "<<size_pu<<", start_pv_fpga: "<<start_pv_fpga<<", start_pv: "<<start_pv<<", size_pv: "<<size_pv<<", start_gv_fpga: "<<start_gv_fpga<<", start_gv: "<<start_gv<<", size_gv: "<<size_gv<<endl; }
	if(start_gv != NAp && fpga < num_prints) { cout<<"acts started [gathering stage]: fpga: "<<fpga<<", start_pu: "<<start_pu<<", size_pu: "<<size_pu<<", start_pv_fpga: "<<start_pv_fpga<<", start_pv: "<<start_pv<<", size_pv: "<<size_pv<<", start_gv_fpga: "<<start_gv_fpga<<", start_gv: "<<start_gv<<", size_gv: "<<size_gv<<endl; }			
	if(id_import != INVALID_IOBUFFER_ID && fpga < num_prints){ cout << "### acts started [importing stage]: --> importing upartition: "<<id_import<<" to "<<id_import + _IMPORT_BATCH_SIZE<<"..." <<endl; }
	if(id_export != INVALID_IOBUFFER_ID && fpga < num_prints){ cout << "### acts started [exporting stage]: <-- exporting vpartition: "<<id_export<<" to "<<id_export + _EXPORT_BATCH_SIZE<<"  [FPGAs "; for(unsigned int n=0; n<numfpgas; n++){ cout<<n<<", "; } cout<<"]..." <<endl; }				
	#endif 

	// commands from host 
	action_t action;
	action.fpga = fpga; 
	action.module = module; 
	action.graph_iteration = graph_iteration; 
	action.start_pu = start_pu; 
	action.size_pu = size_pu; 
	action.skip_pu = skip_pu; 
	action.start_pv_fpga = start_pv_fpga;
	action.start_pv = start_pv;
	action.size_pv = size_pv; 
	action.start_llpset = start_llpset; 
	action.size_llpset = size_llpset; 
	action.start_llpid = start_llpid; 
	action.size_llpid = size_llpid; 
	action.start_gv_fpga = start_gv_fpga;
	action.start_gv = start_gv; 
	action.size_gv = size_gv;
	action.id_process = id_process;
	action.id_import = id_import;
	action.id_export = id_export;
	action.size_import_export = size_import_export;
	action.status = status;
	action.numfpgas = numfpgas; 
	action.command = command;
	
	unsigned int mask[8]; mask[0] = mask0; mask[1] = mask1; mask[2] = mask2; mask[3] = mask3; mask[4] = mask4; mask[5] = mask5; mask[6] = mask6; mask[7] = mask7;
	
	#ifdef _DEBUGMODE_KERNELPRINTS//4					
	if(action.id_import != INVALID_IOBUFFER_ID && action.fpga < num_prints){ cout<< TIMINGRESULTSCOLOR << "--> importing upartition: "<<action.id_import<<" to "<<action.id_import + IMPORT_BATCH_SIZE_<<"..."<< RESET <<endl; }
	if(action.id_export != INVALID_IOBUFFER_ID && action.fpga < num_prints){ cout<< TIMINGRESULTSCOLOR << "<-- exporting vpartition: "<<action.id_export<<" to "<<action.id_export + EXPORT_BATCH_SIZE_<<"  [FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"]..."<< RESET <<endl; }				
	#endif 
	
	if(action.id_process == INVALID_IOBUFFER_ID && action.module != APPLY_UPDATES_MODULE && action.module != GATHER_FRONTIERS_MODULE){ 
		#ifdef ___RUNNING_FPGA_SYNTHESIS___
		return; 
		#else 
		return 0;	
		#endif 
	}
	
	#ifdef _DEBUGMODE_KERNELPRINTS//4				
	if(action.module == PROCESS_EDGES_MODULE && action.fpga < num_prints){ cout<< TIMINGRESULTSCOLOR << "--- processing upartition: "<<action.id_process<<" to "<<action.id_process + PE_BATCH_SIZE - 1<<" "<< RESET <<endl; }
	else if(action.module == APPLY_UPDATES_MODULE && action.fpga < num_prints){ cout<< TIMINGRESULTSCOLOR << "--- applying vpartition: "<<action.start_pv<<" to "<<action.start_pv + AU_BATCH_SIZE - 1<<" [FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"]..."<< RESET <<endl; }
	else if(action.module == GATHER_FRONTIERS_MODULE && action.fpga < num_prints){ cout<< TIMINGRESULTSCOLOR << "--- gathering frontiers for upartition: "<<action.start_gv<<" to "<<action.start_gv + GF_BATCH_SIZE - 1<<" [target FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"]"; cout<<"..."<< RESET <<endl; }
	else { if(action.module != ALL_MODULES && action.fpga < num_prints){ cout<<"acts: ERROR 232. EXITING..."<<endl; exit(EXIT_FAILURE); }}
	#endif 
	
	// convert
	if(action.id_import != INVALID_IOBUFFER_ID){ action.id_import = (action.id_import * action.numfpgas) + fpga; }	
	
	// declarations
	{% include '___ENABLE___DECLARATIONS___.template' %}	
	
	// initialize variables 
	{% include '___ENABLE___INITIALIZE___.template' %}	

	// resets
	if(___ENABLE___RESETBUFFERSATSTART___BOOL___ == 1){
		#ifdef ___ENABLE___RESETBUFFERSATSTART___
		{% include '___ENABLE___RESETBUFFERSATSTART___.template' %}		
		#endif 
	}
	
	unsigned int algo = globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM];
	unsigned int import_offset = action.id_import * action.size_import_export;
	unsigned int export_offset = action.id_export * action.size_import_export;
	unsigned int vdata_subpartition_vecsize = MAX_UPARTITION_VECSIZE / globalparams[GLOBALPARAMSCODE__PARAM__GLOBAL_NUM_PEs];
	unsigned int num_subpartition_per_partition = globalparams[GLOBALPARAMSCODE__PARAM__GLOBAL_NUM_PEs];
	#ifdef _DEBUGMODE_KERNELPRINTS//4
	cout<<"acts kernel- vdata_subpartition_vecsize: "<<vdata_subpartition_vecsize<<endl;
	cout<<"acts kernel- num_subpartition_per_partition: "<<num_subpartition_per_partition<<endl;
	#endif 
	
	// load vertex-updates map 
	#ifdef _DEBUGMODE_KERNELPRINTS4
	if((action.module == ALL_MODULES || action.module == PROCESS_EDGES_MODULE) && (action.start_pu == 0)){ if(action.fpga < num_prints){ cout << "acts: resetting updates space..." <<endl; }}
	#endif 
	LOAD_UPDATEPTRS_lOOP1: for(unsigned int t=0; t<globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS]; t++){	
	#pragma HLS PIPELINE II=1
		updatesptrs[t] = load_vupdate_map(globalparams[GLOBALPARAMSCODE__BASEOFFSET__UPDATESPTRS], t, {% include '___HBM___ARGS___.template' %});	
		updatesptrs[t].offset = 0; // FIXME.
		if((action.module == ALL_MODULES || action.module == PROCESS_EDGES_MODULE) && (action.start_pu == 0)){ updatesptrs[t].size = 0; }				
		#ifdef _DEBUGMODE_KERNELPRINTS//4
		if(action.fpga < num_prints){ cout<<"acts: start: updatesptrs["<<t<<"].offset: "<<updatesptrs[t].offset<<", updatesptrs["<<t<<"].size: "<<updatesptrs[t].size<<endl; }
		#endif 
	}
	
	// load edge map 
	#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
	map_t edge_maps_l[NUM_VALID_PEs];
	map_t edgeu_maps_l[NUM_VALID_PEs];
	#pragma HLS ARRAY_PARTITION variable=edge_maps_l complete
	#pragma HLS ARRAY_PARTITION variable=edgeu_maps_l complete
	LOAD_EDGEPTRS_lOOP1: for(unsigned int p_u=action.start_pu; p_u<action.start_pu + action.size_pu + 4; p_u+=action.skip_pu){
		load_edgemaps((p_u * MAX_NUM_LLPSETS) + 0, globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKVPTRS], edge_maps_l, {% include '___HBM___ARGS___.template' %}); 
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#pragma HLS UNROLL
			edge_maps_buffer[n][p_u].offset = edge_maps_l[n].offset; edge_maps_buffer[n][p_u].size = edge_maps_l[n].size;
			#ifdef _DEBUGMODE_KERNELPRINTS//4
			cout<<">>> acts : [load] edge_maps_l["<<n<<"]["<<p_u<<"].offset: "<<edge_maps_l[n].offset<<", edge_maps_l["<<n<<"]["<<p_u<<"].size: "<<edge_maps_l[n].size<<", maxsz: "<<(edge_maps_buffer[n][p_u + 1].offset - edge_maps_buffer[n][p_u].offset)<<endl;
			#endif 
		}
	}
	LOAD_EDGEPTRS_lOOP2: for(unsigned int p_u=action.start_pu; p_u<action.start_pu + action.size_pu + 4; p_u+=action.skip_pu){
		load_edgemaps((p_u * MAX_NUM_LLPSETS) + 0, globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATESPTRS], edgeu_maps_l, {% include '___HBM___ARGS___.template' %}); // REMOVEME.
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#pragma HLS UNROLL
			edgeu_maps_buffer[n][p_u].offset = edgeu_maps_l[n].offset; edgeu_maps_buffer[n][p_u].size = edgeu_maps_l[n].size;
			#ifdef _DEBUGMODE_KERNELPRINTS//4
			cout<<">>> acts : [load] edgeu_maps_l["<<n<<"]["<<p_u<<"].offset: "<<edgeu_maps_l[n].offset<<", edgeu_maps_l["<<n<<"]["<<p_u<<"].size: "<<edgeu_maps_l[n].size<<endl;
			#endif 
		}
	}
	for(unsigned int p_u=action.start_pu; p_u<action.start_pu + action.size_pu + 4; p_u+=action.skip_pu){
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#ifdef _DEBUGMODE_KERNELPRINTS4
			cout<<">>> acts : [load][edge_maps_s,edgeu_maps_s][p_u: "<<p_u<<"]: offset: "<<edge_maps_buffer[n][p_u].offset<<", proc: "<<edge_maps_buffer[n][p_u].size<<", rem: "<<edgeu_maps_buffer[n][p_u].size<<", maxsz: "<<(edge_maps_buffer[n][p_u + 1].offset - edge_maps_buffer[n][p_u].offset)<<endl;
			#endif 
		}
	}
	#endif

	unsigned int GraphIter=0; 
	unsigned int MASK_CODE = 1 + GraphIter;
	unsigned int MASK_CODE_PE = 1 + GraphIter;
	unsigned int MASK_CODE_AU = 4094 + 1 + GraphIter;
	
	// clear counters
	#ifdef ___ENABLE___CLEAR_COUNTERS___
	{% include '___ENABLE___CLEAR_COUNTERS___.template' %}	
	#endif
	
	// process-edges and partition-updates 
	#ifdef ___ENABLE___PROCESSEDGES___
	if(action.module == PROCESS_EDGES_MODULE || action.module == ALL_MODULES){
	PROCESS_EDGES_MODULE_LOOP1B: for(unsigned int local_pu=action.start_pu; local_pu<action.start_pu + action.size_pu; local_pu+=action.skip_pu){
		unsigned int p_u = local_pu; 
		action.id_process = p_u; 
		MASK_CODE_PE = ((1 + GraphIter) * MAX_NUM_UPARTITIONS) + p_u;
		if(p_u >= globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]){ continue; } 
	
		#ifdef _DEBUGMODE_KERNELPRINTS//4 
		if(action.fpga < num_prints){ cout<<"### processing edges in upartition "<<local_pu<<" (global: "<<p_u<<"): [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"] [max "<<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]<<"]"<<endl; }
		#endif 
		
		// read & map frontier properties 
		#ifdef ___ENABLE___READ_FRONTIER_PROPERTIES___
		if(___ENABLE___READ_FRONTIER_PROPERTIES___BOOL___ == 1){ 
			if(p_u % NUM_VALID_HBM_CHANNELS_PER_SLR==0){ // sharing reduces number of reads. FIXME^
				{% include '___ENABLE___READ_FRONTIERS___.template' %}		
			}
		}
		#endif
		
		// process-edges and partition-updates
		#ifdef ___ENABLE___ECPROCESSEDGES___II1___ 
		if(___ENABLE___PROCESSEDGES___BOOL___ == 1){ 
			{% include '___ENABLE___PROCESS_EDGES_AND_PARTITION_UPDATES___.template' %}		
		}
		#endif
	}
	}
	#endif

	unsigned int totalactvvs2 = 0; 
	frontier_t actvv[EDGE_PACK_SIZE]; 
	for(unsigned int p_u=0; p_u<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]; p_u++){ upartition_vertices[p_u].count = 0; }
	for(unsigned int p_u=0; p_u<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]; p_u++){ cfrontier_dram___size[p_u] = 0; } // reset
	
	// apply updates 
	#ifdef ___ENABLE___APPLYUPDATESMODULE___ 
	if(action.module == APPLY_UPDATES_MODULE || action.module == ALL_MODULES){
	APPLY_UPDATES_MODULE_LOOP: for(unsigned int p_v=action.start_pv; p_v<action.start_pv + action.size_pv; p_v++){
		#ifndef ___ENABLE___DYNAMICGRAPHANALYTICS___ 
		if(updatesptrs[p_v].size == 0 || p_v >= globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS]){ continue; } 
		#endif 
		
		#ifndef FPGA_IMPL
		checkoutofbounds("acts_kernel::ERROR 862::", p_v, globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS] * action.numfpgas, p_v, globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS], NAp);
		#endif 
		unsigned int voffset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__VDATAS] + (p_v * MAX_APPLYPARTITION_VECSIZE);
		
		#ifdef _DEBUGMODE_KERNELPRINTS4 
		if(action.fpga < num_prints){ cout<<"### applying vertex updates in vpartition "<<p_v<<": [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"] [target FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"] [max "<<globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS]<<", "<<updatesptrs[p_v].size<<"]"<<endl; } 
		#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___ 
		if(action.fpga < num_prints){ cout<<"### applying edge updates in vpartition "<<p_v<<": [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"] [target FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"]"<<endl; } 
		#endif 
		if(false && action.fpga < num_prints){ cout<<"APPLY_UPDATES_MODULE_LOOP: action.start_pv_fpga: "<<action.start_pv_fpga<<", updatesptrs["<<p_v<<"].size: "<<updatesptrs[p_v].size<<" ("<<updatesptrs[p_v].size * EDGE_PACK_SIZE<<") ((((((((((((((((((((((( "<<endl; }
		if(false && action.fpga < num_prints){ cout<<"APPLY_UPDATES_MODULE_LOOP: action.start_pv_fpga: "<<action.start_pv_fpga<<", vpartition_vertices[0]["<<p_v<<"].count (ww): "<<vpartition_vertices[0][p_v].count<<" ((((((((((((((((((((((( "<<endl; }
		#endif 
		
		// read destination properties
		#ifdef ___ENABLE___READ_DEST_PROPERTIES___
		if(___ENABLE___READ_DEST_PROPERTIES___BOOL___ == 1){
			{% include '___ENABLE___READ_DEST_PROPERTIES___.template' %}	
		}
		#endif
		
		// apply updates
		#ifdef ___ENABLE___APPLYUPDATES___II1___ 
		if(___ENABLE___APPLYUPDATES___BOOL___ == 1){
			{% include '___ENABLE___APPLY_VERTEXUPDATES___.template' %}			
		}	
		#endif 
		
		#ifdef ___ENABLE___APPLYVERTEXUPDATES_AND_APPLYEDGES___II1___ 
		if(___ENABLE___APPLYUPDATES___BOOL___ == 1){
			{% include '___ENABLE___APPLY_ALLUPDATES___.template' %}	
		}
		#endif 
		
		// collect and save frontiers
		#ifdef ___ENABLE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___XXX // FIXME.
		if(___ENABLE___COLLECT_AND_SAVE_FRONTIER_PROPERTIES___BOOL___ == 1){
			{% include '___ENABLE___COLLECT_AND_SAVE_FRONTIERS___.template' %}	
		}
		#endif 
		
		// save destination properties
		#ifdef ___ENABLE___SAVE_DEST_PROPERTIES___
		if(___ENABLE___SAVE_DEST_PROPERTIES___BOOL___ == 1){	
			{% include '___ENABLE___SAVE_DEST_PROPERTIES___.template' %}	
		}
		#endif 
	} 
	}
	#endif
	
	// gather frontiers 
	#ifdef ___ENABLE___GATHER_FRONTIERINFOS___
	#if NUM_PEs>1
	if(action.module == GATHER_FRONTIERS_MODULE || action.module == ALL_MODULES){
		GATHER_FRONTIERS_MODULE_LOOP: for(unsigned int upartitionID=action.start_gv; upartitionID<action.start_gv + action.size_gv; upartitionID++){	
			if(upartitionID >= globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]){ continue; } 
			if(action.command == GRAPH_UPDATE_ONLY || action.command == GRAPH_ANALYTICS_EXCLUDEVERTICES){ continue; }
			
			#ifndef ___RUNNING_FPGA_SYNTHESIS___
			if(action.fpga < num_prints){ cout<<"### gathering frontiers for upartitionID "<<upartitionID<<": [PEs "; for(unsigned int n=0; n<NUM_PEs; n++){ cout<<n<<", "; } cout<<"] [target FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"] [max "<<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS] / action.numfpgas<<"]"<<endl; }
			#endif	
			
			for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#pragma HLS UNROLL
				nfrontier_dram___size[n][upartitionID] = vdata_subpartition_vecsize; 
			}
			
			{%for i in context['NUM_PEs_seq']%}	
			gather_frontiers({{i}}, upartitionID, cfrontier_dram___size, nfrontier_dram___size[0], upartition_vertices, HBM_channelA0, HBM_channelB0, HBM_centerA, HBM_centerB, vdata_subpartition_vecsize, globalparams, _NUMCLOCKCYCLES_);
			{%endfor%}
		}
	}
	#endif 
	#endif 
	
	#ifdef ___ENABLE___REPORT_STATISTICS___
	{% include '___ENABLE___REPORT_STATISTICS___.template' %}	
	#endif 
	
	// save state: vertex updates 
	#ifndef ___ENABLE___DYNAMICGRAPHANALYTICS___
	if(action.module == PROCESS_EDGES_MODULE){ 
		SAVE_UPDATEPTRS_lOOP1B: for(unsigned int t=0; t<globalparams[GLOBALPARAMSCODE__PARAM__NUM_APPLYPARTITIONS]; t++){	
		#pragma HLS PIPELINE II=1
			map_t map_data; map_data.offset = updatesptrs[t].offset; map_data.size = updatesptrs[t].size; 
			save_vupdate_map(globalparams[GLOBALPARAMSCODE__BASEOFFSET__UPDATESPTRS], t, map_data, {% include '___HBM___ARGS___.template' %}); 			
			#ifdef _DEBUGMODE_KERNELPRINTS//4
			if(action.fpga < num_prints){ cout<<"finish: updatesptrs["<<t<<"].offset: "<<updatesptrs[t].offset<<", updatesptrs["<<t<<"].size: "<<updatesptrs[t].size<<endl; }
			#endif 
		}
	}
	#endif 
	
	// save state: edges 
	#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___
	map_t edge_maps_s[NUM_VALID_PEs];
	map_t edgeu_maps_s[NUM_VALID_PEs];
	#pragma HLS ARRAY_PARTITION variable=edge_maps_s complete
	#pragma HLS ARRAY_PARTITION variable=edgeu_maps_s complete
	for(unsigned int p_u=action.start_pu; p_u<action.start_pu + action.size_pu + 4; p_u+=action.skip_pu){
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#pragma HLS UNROLL
			edge_maps_s[n].offset = edge_maps_buffer[n][p_u].offset; edge_maps_s[n].size = edge_maps_buffer[n][p_u].size;
			#ifdef _DEBUGMODE_KERNELPRINTS4
			cout<<">>> acts : [save][edge_maps_s,edgeu_maps_s][p_u: "<<p_u<<"]: offset: "<<edge_maps_buffer[n][p_u].offset<<", proc: "<<edge_maps_buffer[n][p_u].size<<", rem: "<<edgeu_maps_buffer[n][p_u].size<<", maxsz: "<<(edge_maps_buffer[n][p_u + 1].offset - edge_maps_buffer[n][p_u].offset)<<endl;
			#endif 
		}
		save_edgemaps((p_u * MAX_NUM_LLPSETS) + 0, globalparams[GLOBALPARAMSCODE__BASEOFFSET__ACTPACKVPTRS], edge_maps_s, {% include '___HBM___ARGS___.template' %}); 
	}
	for(unsigned int p_u=action.start_pu; p_u<action.start_pu + action.size_pu + 4; p_u+=action.skip_pu){
		for(unsigned int n=0; n<NUM_VALID_PEs; n++){
			#pragma HLS UNROLL
			edgeu_maps_s[n].offset = edgeu_maps_buffer[n][p_u].offset; edgeu_maps_s[n].size = edgeu_maps_buffer[n][p_u].size;
		}
		save_edgemaps((p_u * MAX_NUM_LLPSETS) + 0, globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATESPTRS], edgeu_maps_s, {% include '___HBM___ARGS___.template' %}); 
	}
	#endif 
	
	// report result
	#ifdef _DEBUGMODE_CHECKS3
	if(action.status == 1){
		{% include '___ENABLE___SUMMARY___.template' %}	
	}
	#endif	
	
	#ifdef ___RUNNING_FPGA_SYNTHESIS___
	return;
	#else 
	return 0;	
	#endif 
}
}
