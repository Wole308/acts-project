#ifdef _DEBUGMODE_CHECKS3
#define _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
#endif 

edge_update_type MISSBUFFER_edgeupdates[NUM_VALID_PEs][EDGE_PACK_SIZE][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates complete dim=2	
edge3_type MISSBUFFER_edges[NUM_VALID_PEs][EDGE_PACK_SIZE][BLOCKRAM_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edges complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edges complete dim=2	

unsigned int MISSBUFFER_edgeupdates_index[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=1	
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=2	
unsigned int MISSBUFFER_edges_index[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=1
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete dim=2	

unsigned int max_sz_eus[NUM_VALID_PEs][EDGE_PACK_SIZE];
#pragma HLS ARRAY_PARTITION variable=MISSBUFFER_edgeupdates_index complete

edge_update_vec_dt tmp_buffer[NUM_VALID_PEs][BLOCKRAM_SIZE];	
#pragma HLS ARRAY_PARTITION variable=tmp_buffer complete dim=1
edge3_vec_dt tmp_buffer2[NUM_VALID_PEs][BLOCKRAM_SIZE];	
#pragma HLS ARRAY_PARTITION variable=tmp_buffer2 complete dim=1

edge_update_vec_dt edge_update_vecs[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable=edge_update_vecs complete
edge3_vec_dt edge3_vecs[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable=edge3_vecs complete
unsigned int offsets[NUM_VALID_PEs];
#pragma HLS ARRAY_PARTITION variable = offsets complete
unsigned int maxs[NUM_VALID_PEs]; 
#pragma HLS ARRAY_PARTITION variable=maxs complete

TOP_APPLY_VERTE_AND_EDGE_UPDATES: for(unsigned int p_u=0; p_u<globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]; p_u++){
	#ifdef ___ENABLE___DYNAMICGRAPHANALYTICS___ 
	#ifdef _DEBUGMODE_KERNELPRINTS4 
	if(action.fpga < num_prints){ cout<<"### applying edge updates in vpartition "<<p_v<<", upartition "<<p_u<<": [PEs "; for(unsigned int n=0; n<NUM_VALID_PEs; n++){ cout<<n<<", "; } cout<<"] [target FPGAs "; for(unsigned int n=0; n<action.numfpgas; n++){ cout<<n<<", "; } cout<<"]"<<endl; } 
	#endif 
	#endif 
	
	unsigned int offset = (p_v * globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]);
	unsigned int max_limit = edgeupdatesptrs[0][offset + p_u].size; 
	unsigned int padding_factor = 1;
		
	// clear indices
	for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
	#pragma HLS UNROLL
		MY_LOOP12746: for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
		#pragma HLS UNROLL
			MISSBUFFER_edgeupdates_index[inst][v] = 0;
			MISSBUFFER_edges_index[inst][v] = 0;
		}
	}

	// load edge updates to BRAM buffer
	for(unsigned int n=0; n<NUM_VALID_PEs; n++){ offsets[n] = 0; }	
	unsigned int offset2 = ((p_v * globalparams[GLOBALPARAMSCODE__PARAM__NUM_UPARTITIONS]) + p_u) * 512;
	LOAD_EDGEUPDATES_LOOP1: for(unsigned int t=0; t<BLOCKRAM_SIZE; t++){
	#pragma HLS PIPELINE II={{context['II_COLLECTSTATS_EDGEUPDATES_LOOP1']}}
		dretrievemany_edges(globalparams[GLOBALPARAMSCODE__BASEOFFSET__EDGEUPDATES] + offset2 + t, offsets, t, edge3_vecs, {% include '___HBM___ARGS___.template' %});
				
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				edge_update_type edge_update = edge3_vecs[inst].data[v];
				// edge_update.srcvid = rand() % EDGE_UPDATES_DRAMBUFFER_SIZE; edge_update.dstvid = rand() % EDGE_UPDATES_DRAMBUFFER_SIZE; // FIXME.
				#ifdef _DEBUGMODE_KERNELPRINTS//4
				cout<<"acts-apply: t: "<<t<<", edge_update.srcvid: "<<edge_update.srcvid<<", edge_update.dstvid: "<<edge_update.dstvid<<endl;
				#endif 
				tmp_buffer[inst][t].data[v] = edge_update;
				unsigned int incr = 0; unsigned int index = 0; 
				if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ incr = 1; index = edge_update.srcvid; } else { incr = 0; index = 0; }	
				URAM_map[inst][v][index].size += incr;								
			}
		}
	}
	// exit(EXIT_SUCCESS);	

	// calculate edge updates stats
	COLLECTSTATS_EDGEUPDATES_LOOP2: for(unsigned int t=1; t<EDGE_UPDATES_DRAMBUFFER_SIZE; t++){ 
	#pragma HLS PIPELINE II={{context['II_COLLECTSTATS_EDGEUPDATES_LOOP2']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){	
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				URAM_map[inst][v][t].offset = URAM_map[inst][v][t-1].offset + (URAM_map[inst][v][t-1].size * padding_factor); 
			}
		}
	}		

	// print summary
	#ifdef _DEBUGMODE_KERNELPRINTS//4
	unsigned int tots_ = 0; unsigned int tots2_ = 0;
	for(unsigned int t=0; t<EDGE_UPDATES_DRAMBUFFER_SIZE; t++){ for(unsigned int inst=0; inst<1; inst++){ for(unsigned int v=0; v<1; v++){ if(URAM_map[inst][v][t].size > 0){ cout<<"------ URAM_map["<<inst<<"]["<<v<<"]["<<t<<"].offset: "<<URAM_map[inst][v][t].offset<<", URAM_map["<<inst<<"]["<<v<<"]["<<t<<"].size: "<<URAM_map[inst][v][t].size<<endl; tots_ += 1; tots2_ += URAM_map[inst][v][t].size; }}}}
	cout<<"acts-apply: summary: used "<<tots_<<" slots (of 8192 slots). tots2: "<<tots2_<<endl;
	#endif 	
	// exit(EXIT_SUCCESS); 

	// map edge updates to URAM
	unsigned int batch_sz = 128; unsigned int max_sz_eu = BLOCKRAM_SIZE;
	LOAD_EDGEUPDATES_LOOP2: for(unsigned int t1=0; t1<(max_sz_eu + (batch_sz-1)) / batch_sz; t1++){
		LOAD_EDGEUPDATES_LOOP1B: for(unsigned int t2=0; t2<batch_sz; t2++){ // FIXHANG.
		#pragma HLS PIPELINE II={{context['II_LOAD_EDGEUPDATES_LOOP1']}}
			unsigned int t = (t1 * batch_sz) + t2;
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
				#pragma HLS UNROLL
					edge_update_type edge_update = tmp_buffer[inst][t].data[v];
					#ifdef _DEBUGMODE_CHECKS3
					if(edge_update.srcvid != INVALIDDATA && t < max_sz_eu){ checkoutofbounds("acts_kernel::ERROR 8813::", edge_update.srcvid, MAX_UPARTITION_SIZE, t, v, inst); }
					if(edge_update.srcvid != INVALIDDATA && t < max_sz_eu){ checkoutofbounds("acts_kernel::ERROR 7713::", edge_update.srcvid, EDGE_UPDATES_DRAMBUFFER_SIZE, t, v, inst); }
					#endif
					
					map_t map; map.size = 0;
					if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ map = URAM_map[inst][v][edge_update.srcvid]; }
					
					if(map.size > 0 && t < max_sz_eu){	
						unsigned int edge_hashid = hash2_edge(map, edge_update.srcvid, edge_update.dstvid, padding_factor); 

						#ifdef _DEBUGMODE_KERNELPRINTS//4 
						if(inst==0 && p_u==0 && llp_set==0 && t<2){ cout<<"$$$ load-edge-updates::["<<inst<<"]["<<t<<"]["<<v<<"]: [edge_update-update: srcvid: "<<edge_update.srcvid<<", dstvid: "<<edge_update.dstvid<<"]---[edge_hashid: "<<edge_hashid<<"]"<<endl; }								
						#endif
						
						edge_update_type former_edge_update = URAM_edgeupdates[inst][v][edge_hashid];
						edge_update_type new_edge_update;
						if(former_edge_update.srcvid == INVALIDDATA){ new_edge_update = edge_update; } else { new_edge_update = former_edge_update; }
						
						URAM_edgeupdates[inst][v][edge_hashid] = new_edge_update;
						edgeupdates_hash_ids[inst][v][t] = edge_hashid;
						
						if(former_edge_update.srcvid != INVALIDDATA){
							#ifdef _DEBUGMODE_CHECKS3
							checkoutofbounds("apply-edge-updates::ERROR 25173::", MISSBUFFER_edgeupdates_index[inst][v], BLOCKRAM_SIZE, NAp, NAp, NAp);
							#endif
							MISSBUFFER_edgeupdates[inst][v][MISSBUFFER_edgeupdates_index[inst][v]] = edge_update;
							MISSBUFFER_edgeupdates_index[inst][v] += 1; 
						}
					}
				}
			}
		}
	}
	// exit(EXIT_SUCCESS);

	// print summary
	#ifdef _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
	if(false){ for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<"acts-apply: MISSBUFFER_edgeupdates_index[0]["<<v<<"]: "<<MISSBUFFER_edgeupdates_index[0][v]<<endl; }}
	unsigned int total_num_misses_ = 0; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ total_num_misses_ += MISSBUFFER_edgeupdates_index[0][v]; }
	cout<<"apply-edge-updates: miss summary: total number of misses: "<<total_num_misses_<<" (of "<<max_sz_eu * EDGE_PACK_SIZE<<")"<<endl;
	#endif 
	// exit(EXIT_SUCCESS);

	// (1) apply vertex updates to vertices; (2) *** EDGE UPDATING ***
	unsigned int num_hits = 0; unsigned int num_misses = 0;
	uint512_vec_dt updates_vecs[NUM_VALID_PEs];
	#pragma HLS ARRAY_PARTITION variable=updates_vecs complete
	APPLY_UPDATES_LOOP: for(unsigned int it=0; it<(max_limit + BLOCKRAM_SIZE - 1) / BLOCKRAM_SIZE; it++){
		unsigned int sz = BLOCKRAM_SIZE; if((it + 1) * BLOCKRAM_SIZE > max_limit){ sz = max_limit - (it * BLOCKRAM_SIZE); }
		unsigned int updates_offset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__VERTEXUPDATES] + updatesptrs[0][p_v].offset + (it * BLOCKRAM_SIZE);
		unsigned int edges_offset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__VERTEXUPDATES] + updatesptrs[0][p_v].offset + (it * BLOCKRAM_SIZE);
		
		APPLY_VERTEX_UPDATES_LOOP: for(unsigned int t=0; t<sz; t++){				
		#pragma HLS PIPELINE II={{context['II_APPLY_UPDATES_LOOP1']}}
			dretrievemany_udatesdram(updates_offset + t, updates_vecs, {% include '___HBM___ARGS___.template' %}); // NEW
			
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL
					tmp_buffer2[inst][t].data[v].srcvid = updates_vecs[inst].data[v].key;
					tmp_buffer2[inst][t].data[v].dstvid = updates_vecs[inst].data[v].value;
				}
			}
			
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){ 
			#pragma HLS UNROLL
				uint512_vec_dt updates_vec = updates_vecs[inst];
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){		
				#pragma HLS UNROLL
					keyvalue_t update = updates_vec.data[v];
					unsigned int dstvid_lp = update.key; 
					if(update.key >= MAX_APPLYPARTITION_SIZE){ dstvid_lp = 0; }
					unsigned int dstvid_lpv = dstvid_lp / EDGE_PACK_SIZE;	
					
					#ifdef _DEBUGMODE_KERNELPRINTS//4
					if(t< 160 || true){ std::cout<<"SAMPLE VERTEX UPDATE (APPLY) @: t: "<<t<<", inst: "<<inst<<", v: "<<v<<", update.key: "<<update.key<<", update.value: "<<update.value<<std::endl; }
					#endif
					
					#ifdef _DEBUGMODE_CHECKS3
					if(t < limits[inst]){ checkoutofbounds("acts_kernel::ERROR 727a::", dstvid_lp, MAX_APPLYPARTITION_SIZE, NAp, inst, update.key); checkoutofbounds("acts_kernel::ERROR 727b::", dstvid_lpv, MAX_APPLYPARTITION_VECSIZE, NAp, inst, update.key); }					
					#endif
					vprop_t vprop = URAM_vprop[inst][v][dstvid_lpv];
					vprop_t newprop; newprop.prop = INVALIDDATA; newprop.degree = INVALIDDATA;
					unsigned int new_vprop = reduce_funcG(vprop, update.value, globalparams[GLOBALPARAMSCODE__PARAM__ALGORITHM]);
					if(t < limits[inst]){ 
						#ifdef _DEBUGMODE_KERNELPRINTS_TRACE3
						std::cout<<"APPLY (ACT-PACK) UPDATE SEEN @: t: "<<t<<", inst: ["<<inst<<"]: dstvid_lp: "<<dstvid_lp<<", dstvid_lpv: "<<dstvid_lpv<<", new_vprop: "<<new_vprop<<", vid: "<<update.key<<std::endl;
						#endif
						newprop.prop = new_vprop; newprop.degree = MASK_CODE_AU;
					}
					URAM_vprop[inst][v][dstvid_lpv] = newprop; 
					#ifdef _DEBUGMODE_CHECKS3
					if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___APPLYUPDATES___, 1); }
					#endif 
				}
			}
			
			#ifdef ___ENABLE___IMPORT_EXPORT___
			hidden_import_and_export_function(t, import_offset, export_offset, action.size_import_export, HBM_centerA, HBM_centerB, HBM_import, HBM_export, action);
			#endif 
		}
		
		APPLY_EDGE_UPDATES_LOOP: for(unsigned int t=0; t<sz; t++){
		#pragma HLS PIPELINE II={{context['II_APPLY_EDGEUPDATES_MAINLOOP1D']}}
			for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
			#pragma HLS UNROLL
				edge3_vecs[inst] = tmp_buffer2[inst][t];
				for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ 
				#pragma HLS UNROLL	
					edge3_type edge = edge3_vecs[inst].data[v];
					unsigned int weight = edge.weight;	

					map_t map; map.size = 0;
					if(edge.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ map = URAM_map[inst][v][edge.srcvid]; }
					
					if(map.size == 0){
					// num_hits += 1;
					} else if(map.size > 0){
						unsigned int edge_hashid = hash2_edge(map, edge.srcvid, edge.dstvid, padding_factor);
						unsigned int eu_weight = 1;
						
						#ifdef _DEBUGMODE_KERNELPRINTS//4 
						if(inst==0 && p_u==0 && llp_set==0 && t<8){ cout<<"### process-edge-updates::["<<inst<<"]["<<t<<"]["<<v<<"]:edges: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<"]---[edge: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<"]---[edge_hashid: "<<edge_hashid<<"]"<<endl; }								
						#endif 
						
						edge_update_type edge_update = URAM_edgeupdates[inst][v][edge_hashid];
						if(edge.srcvid == edge_update.srcvid && edge.dstvid == edge_update.dstvid){
							edge3_vecs[inst].data[v].weight += eu_weight;									
							#ifdef _DEBUGMODE_CHECKS3
							if(inst==0){ num_hits += 1; }
							if(inst==0 && false){ cout<<"[process-edge-updates:: hit seen @ ["<<inst<<"]["<<t<<"]["<<v<<"]: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
							#endif 
							if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGE_UPDATINGS___, 1); }
						} else {
							if(edge_update.srcvid == INVALIDDATA || URAM_map[inst][v][edge.srcvid].size == 0){
								#ifdef _DEBUGMODE_CHECKS3
								if(inst==0){ num_hits += 1; }
								#endif 
							} else {		
								MISSBUFFER_edges[inst][v][MISSBUFFER_edges_index[inst][v]] = edge; // FIXME.
								// MISSBUFFER_edges_index[inst][v] += 1;
								#ifdef _DEBUGMODE_CHECKS3
								if(inst==0){ num_misses += 1; }
								checkoutofbounds("utility::ERROR 25183::", MISSBUFFER_edges_index[inst][v], BLOCKRAM_SIZE, NAp, NAp, NAp);
								if(inst==0 && false){ cout<<"[process-edge-updates:: miss seen @ ["<<inst<<"]["<<v<<"]["<<t<<"]: srcvid: "<<edge.srcvid<<", dstvid: "<<edge.dstvid<<", edge_hashid: "<<edge_hashid<<"]"<<endl; }
								#endif 
							}
						}
					} else {
						#ifdef _DEBUGMODE_CHECKS3
						cout<<""<<endl;
						#endif 
					}
				}
			}
		
			dinsertmany_edgesdram(edges_offset + t, edge3_vecs, {% include '___HBM___ARGS___.template' %});
		}
	}
	// exit(EXIT_SUCCESS);	
	
	// *** EDGE INSERTIONS ***
	unsigned int edges_offset = globalparams[GLOBALPARAMSCODE__BASEOFFSET__VERTEXUPDATES] + updatesptrs[0][p_v].offset;// + (it * BLOCKRAM_SIZE);
	EDGE_INSERTIONS_LOOP: for(unsigned int t=0; t<max_sz_eu; t++){
	#pragma HLS PIPELINE II={{context['II_APPLY_EDGEUPDATES_RESETURAMBUFFERS_MAINLOOP1']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				edge_update_type edge_update = tmp_buffer[inst][t].data[v];
				if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ 
					unsigned int edge_hashid = edgeupdates_hash_ids[inst][v][t];
					 edge3_vecs[inst].data[v] = URAM_edgeupdates[inst][v][edge_hashid];
					 if(inst==0 && v==0){ update_dramnumclockcycles(_NUMCLOCKCYCLES_, ___CODE___NUMBER_OF_EDGE_INSERTIONS___, 1); }
				}
			}
		}
		
		dinsertmany_edgesdram(edges_offset + t, edge3_vecs, {% include '___HBM___ARGS___.template' %});
	}

	// print number of hits and misses
	#ifdef _DEBUGMODE_APPLYEDGEUPDATES_PRINTS4
	if(false){ for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ cout<<"acts-apply: MISSBUFFER_edges_index[0]["<<v<<"]: "<<MISSBUFFER_edges_index[0][v]<<endl; }}
	unsigned int total_num_misses = 0; for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){ total_num_misses += MISSBUFFER_edges_index[0][v]; }
	cout<<"apply-edge-updates: total number of misses: "<<total_num_misses<<" (of "<<max_sz * EDGE_PACK_SIZE<<")"<<endl;
	cout<<"apply-edge-updates: num_hits: "<<num_hits<<", num_misses: "<<num_misses<<""<<endl;
	#endif 
	// exit(EXIT_SUCCESS);	

	// reset URAM buffers
	RESET_URAMS: for(unsigned int t=0; t<max_sz_eu; t++){
	#pragma HLS PIPELINE II={{context['II_APPLY_EDGEUPDATES_RESETURAMBUFFERS_MAINLOOP1']}}
		for(unsigned int inst=0; inst<NUM_VALID_PEs; inst++){
		#pragma HLS UNROLL
			for(unsigned int v=0; v<EDGE_PACK_SIZE; v++){
			#pragma HLS UNROLL
				edge_update_type edge_update = tmp_buffer[inst][t].data[v];
				if(edge_update.srcvid < EDGE_UPDATES_DRAMBUFFER_SIZE){ 
					unsigned int edge_hashid = edgeupdates_hash_ids[inst][v][t];
					URAM_map[inst][v][edge_update.srcvid].offset = 0; 
					URAM_map[inst][v][edge_update.srcvid].size = 0;
					URAM_edgeupdates[inst][v][edge_hashid].srcvid = INVALIDDATA; //
					URAM_edgeupdates[inst][v][edge_hashid].dstvid = INVALIDDATA; //
				}
			}
		}
	}
}
// exit(EXIT_SUCCESS);			






